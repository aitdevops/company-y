name: CI/CD Pipeline

on:
  push:
    branches:
      - master
    paths:
      - 'services/product-service/**'
      - 'services/order-service/**'
      - 'services/user-service/**'
      - 'frontend/**'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ github.run_number }}-${{ github.sha }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Google Cloud auth
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.PROJECT_ID }}
        install_components: kubectl

    - name: Configure Docker for GCP
      run: gcloud auth configure-docker us-docker.pkg.dev

    - name: Filter paths
      id: filter_paths
      uses: dorny/paths-filter@v2
      with:
        filters: |
          frontend:
            - 'frontend/**'
          product-service:
            - 'services/product-service/**'
          order-service:
            - 'services/order-service/**'
          user-service:
            - 'services/user-service/**'

    - name: Build and push frontend image
      if: steps.filter_paths.outputs.frontend == 'true'
      run: |
        docker build -t us-docker.pkg.dev/${{ secrets.PROJECT_ID }}/company-y/aitdevops8/frontend:${{ env.IMAGE_TAG }} -f frontend/Dockerfile ./frontend
        docker push us-docker.pkg.dev/${{ secrets.PROJECT_ID }}/company-y/aitdevops8/frontend:${{ env.IMAGE_TAG }}

    - name: Deploy frontend to GKE
      if: steps.filter_paths.outputs.frontend == 'true'
      run: |
        gcloud container clusters get-credentials ${{ secrets.CLUSTER_NAME }} --zone ${{ secrets.CLUSTER_ZONE }} --project ${{ secrets.PROJECT_ID }}
        kubectl set image deployment/frontend frontend=us-docker.pkg.dev/${{ secrets.PROJECT_ID }}/company-y/aitdevops8/frontend:${{ env.IMAGE_TAG }}
        kubectl rollout status deployment/frontend

    - name: Build and push product-service image
      if: steps.filter_paths.outputs.product-service == 'true'
      run: |
        docker build -t us-docker.pkg.dev/${{ secrets.PROJECT_ID }}/company-y/aitdevops8/product-service:${{ env.IMAGE_TAG }} -f services/product-service/Dockerfile ./services/product-service
        docker push us-docker.pkg.dev/${{ secrets.PROJECT_ID }}/company-y/aitdevops8/product-service:${{ env.IMAGE_TAG }}

    - name: Deploy product-service to GKE
      if: steps.filter_paths.outputs.product-service == 'true'
      run: |
        gcloud container clusters get-credentials ${{ secrets.CLUSTER_NAME }} --zone ${{ secrets.CLUSTER_ZONE }} --project ${{ secrets.PROJECT_ID }}
        kubectl set image deployment/product-service product-service=us-docker.pkg.dev/${{ secrets.PROJECT_ID }}/company-y/aitdevops8/product-service:${{ env.IMAGE_TAG }}
        kubectl rollout status deployment/product-service

    - name: Build and push order-service image
      if: steps.filter_paths.outputs.order-service == 'true'
      run: |
        docker build -t us-docker.pkg.dev/${{ secrets.PROJECT_ID }}/company-y/aitdevops8/order-service:${{ env.IMAGE_TAG }} -f services/order-service/Dockerfile ./services/order-service
        docker push us-docker.pkg.dev/${{ secrets.PROJECT_ID }}/company-y/aitdevops8/order-service:${{ env.IMAGE_TAG }}

    - name: Deploy order-service to GKE
      if: steps.filter_paths.outputs.order-service == 'true'
      run: |
        gcloud container clusters get-credentials ${{ secrets.CLUSTER_NAME }} --zone ${{ secrets.CLUSTER_ZONE }} --project ${{ secrets.PROJECT_ID }}
        kubectl set image deployment/order-service order-service=us-docker.pkg.dev/${{ secrets.PROJECT_ID }}/company-y/aitdevops8/order-service:${{ env.IMAGE_TAG }}
        kubectl rollout status deployment/order-service

    - name: Build and push user-service image
      if: steps.filter_paths.outputs.user-service == 'true'
      run: |
        docker build -t us-docker.pkg.dev/${{ secrets.PROJECT_ID }}/company-y/aitdevops8/user-service:${{ env.IMAGE_TAG }} -f services/user-service/Dockerfile ./services/user-service
        docker push us-docker.pkg.dev/${{ secrets.PROJECT_ID }}/company-y/aitdevops8/user-service:${{ env.IMAGE_TAG }}

    - name: Deploy user-service to GKE
      if: steps.filter_paths.outputs.user-service == 'true'
      run: |
        gcloud container clusters get-credentials ${{ secrets.CLUSTER_NAME }} --zone ${{ secrets.CLUSTER_ZONE }} --project ${{ secrets.PROJECT_ID }}
        kubectl set image deployment/user-service user-service=us-docker.pkg.dev/${{ secrets.PROJECT_ID }}/company-y/aitdevops8/user-service:${{ env.IMAGE_TAG }}
        kubectl rollout status deployment/user-service